21)
Cuando ruby se encuentra unas comillas doble inspecciona el interior para ver si dentro hay alguna variable o caracter especial al que interpolar.
Si solo usamos comillas simples no se preocupa de ello y lo interpreta todo como un string.

22 & 23)

%q Nos permite delimitar cualquier string como si fuera comillas simples
%Q Nos permite delimitar cualquier string como si fuera comillas dobles

24 & 25)

24: Nos interpola la variable en el string: "--4--\n--2--\n" 

25: No nos interpola la variable string:  "--\#{a}--\n--\#{b}--\n" 



26)

s[0,2] = he
s[-1,1] = o
s[0,10] = hello

27)

g="hello world"

28)
e="..."

29)

"2 2 2 " 

30)

%w: Se usa para interpretar los elementos de un array con comilla simple. No interpreta caracteres especiales, no admite interpolacion de variables o secuencias de escape
%W: Se usa para interpretar los elementos de un array con comilla doble. 

33)
[nil, nil, nil]

34)
[0, 0, 0]

35)
[[1, 2], [3, 4]] 

36)
[0, 2, 4] 


37)
a[1,1]=["b"] 
a[-2,2]=["d", "e"] 
a[0..2]=["a", "b", "c"] 
a[0...1]=["a"] 

38)
["A", "B", "c", "d", "e"] 

["A", "B", "C", "D", "E"] 

[1, 2, 3, "A", "B", "C", "D", "E"] 

[3, "A", "B", "C", "D", "E"] 

[3, "A", "B", "C", "D", "Z"] 
 
[3, "A", "B", "C", nil] 

39)
[1, 2, 3, 4, 4, 5] 

[1, 2, 3, 4, 4, 5, [6, 7, 8]] 

no implicit conversion of Fixnum into Array, lo correcto--> a = a + [9]

40)

 ["a", "b", "c", "b", "a"] 
 
 ["a", "a"]

41)
[0, 0, 0, 0, 0, 0, 0, 0] 

42)
 => [1] 

 => [1, 2, 3] 

 => [1, 2, 3, [4, 5, 6]] 

 => [1, 2, 3, [4, 5, 6], 7, 8] 

 43)

c = a | b
 => [1, 2, 3, 4, 5] 
d = b | a
 => [5, 4, 3, 2, 1] 
e = a & b
[2, 3, 4] 
f = b & a
 => [4, 3, 2] 

 44)
 
 => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 

 => [1, 2, 3, 4, 5, 6, 7, 8, 9] 

 => false 

 => true 

1 3 5 7 9  => 1...10 

NoMethodError: undefined method `to_a' for 3:Fixnum
	from (irb):9
	from /usr/local/rvm/rubies/ruby-2.0.0-p247/bin/irb:13:in `<main>'

45)
 => true 
 => true 
 => true 
 
 46)

 => TrueClass 

 => FalseClass 

hello

 => nil 

(irb):5: warning: string literal in condition
NoMethodError: undefined method `put' for main:Object
	from (irb):5
	from /usr/local/rvm/rubies/ruby-2.0.0-p247/bin/irb:13:in `<main>'

47)

2.0.0p247 :006 > x = :sym
 => :sym 
2.0.0p247 :007 > x.class
 => Symbol 
2.0.0p247 :008 > x == 'sym'
 => false 
2.0.0p247 :009 > x == :sym
 => true 
2.0.0p247 :010 > z = :'a long symbol'
 => :"a long symbol" 
2.0.0p247 :011 > z.class
 => Symbol 
2.0.0p247 :012 > x == 'sym'.to_sym
 => true 
2.0.0p247 :013 > x.to_s == 'sym'
 => true 

 48)
 
 2.0.0p247 :001 > s = "Ruby"
 => "Ruby" 
2.0.0p247 :002 > t = s
 => "Ruby" 
2.0.0p247 :003 > t[-1] = ""
 => "" 
2.0.0p247 :004 > print s
Rub => nil 
2.0.0p247 :005 > t = "Java"
 => "Java" 
2.0.0p247 :006 > print s,t
RubJava => nil 

49)
2.0.0p247 :001 > "%d %s" % [3, "rubies"]
 => "3 rubies" 

50)
2.0.0p247 :001 > "%d %s" % [3, "rubies"]
 => "3 rubies" 
2.0.0p247 :002 > x,y = 4, 5
 => [4, 5] 
2.0.0p247 :003 > z = x > y ? x : y
 => 5 
2.0.0p247 :004 > x,y,z = [1,2,3]
 => [1, 2, 3] 

 
 51)
 2.0.0p247 :001 > x = { :a => 1, :b => 2}
 => {:a=>1, :b=>2} 
2.0.0p247 :002 > x.keys
 => [:a, :b] 
2.0.0p247 :003 > x.values
 => [1, 2] 
2.0.0p247 :004 > x[:c] = 3
 => 3 
2.0.0p247 :005 > x
 => {:a=>1, :b=>2, :c=>3} 
2.0.0p247 :006 > x.delete('a')
 => nil 
2.0.0p247 :007 > x
 => {:a=>1, :b=>2, :c=>3} 
2.0.0p247 :008 > x.delete(:a)
 => 1 
2.0.0p247 :009 > x
 => {:b=>2, :c=>3} 
2.0.0p247 :010 > x = { :a => 1, :b => 2, :c => 4}
 => {:a=>1, :b=>2, :c=>4} 
2.0.0p247 :011 > x.delete_if { |k,v| v % 2 ==0}
 => {:a=>1} 
2.0.0p247 :012 > x
 => {:a=>1} 


52)
Un método puede usar el bloque mediante la palabra yield. Lo que sucede es que en el momento que el intérprete llega al yield, se ejecuta el código dentro del bloque, y luego se retorna al método. En el caso de la práctica da un error:
LocalJumpError: no block given (yield)
	from (irb):3
	from /usr/local/rvm/rubies/ruby-2.0.0-p247/bin/irb:13:in `<main>'

53)
Inicializa una tabla hash, de la manera counts = {} obtenemos un array normal.

54)
 => ["hello", "world", "hello", "LPP"] 

 55)
 
 2.0.0p247 :003 > c = { :a => 3, :b => 2, :c => 1}
 => {:a=>3, :b=>2, :c=>1} 

2.0.0p247 :005 > c.keys.sort.each { |k| puts c[k]}
3
2
1
 => [:a, :b, :c] 

Nos muestras los elementos de la tabla partiendo de las claves ordenadas

56)